// Last written by Kihaen 
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}
model Post {
  id          String  @id @default(cuid())
  title       String
  description String?
  content     String?
  published   Boolean @default(false)
  coordinate  Float[] @default([0,0])
  author      User?@relation(fields:[authorId], references:[id])
  authorId    String
  coverImg    String?
  files       String[] @default([])
  location    String  @default("")
  ratings     Rating[]
}

model Message {
  id                 String  @id @default(cuid())
  title              String
  content            String?
  context            String?
  date               String?
  messageAuthor     User @relation("messageAuthor", fields:[authorId], references:[id])
  authorId           String
  messageReceipient User @relation("messageReceipient", fields:[receipientId], references:[id])
  receipientId       String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?@unique
  emailVerified      DateTime?
  password           String?   @db.Char(60)
  image              String?
  posts              Post[]
  ratings            Rating[]
  accounts           Account[]
  sessions           Session[]
  messageAuthor     Message[] @relation("messageAuthor")
  messageReceipient Message[] @relation("messageReceipient")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Rating {
  id        String   @id @default(cuid())
  value     Int      @db.SmallInt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}
